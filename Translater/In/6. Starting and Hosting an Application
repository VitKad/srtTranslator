1
00:00:02,040 --> 00:00:08,040
Чтобы объяснить общие черты всех стилей приложений ASP.NET Core, я использую 

2
00:00:08,040 --> 00:00:12,440
приложение, с которого вы начинаете работу над новым приложением ASP.NET 

3
00:00:12,440 --> 00:00:18,790
Core в Visual Studio.  Каждое приложение ASP.NET Core начинает свою 

4
00:00:18,790 --> 00:00:24,320
жизнь как обычное приложение командной строки. При запуске приложения 

5
00:00:24,320 --> 00:00:27,540
выполняется код в Program.cs.  Сначала 

6
00:00:27,540 --> 00:00:32,590
создается объект-строитель, который затем используется для получения 

7
00:00:32,590 --> 00:00:37,240
объекта приложения, которому, наконец, дается команда на запуск. 

8
00:00:37,240 --> 00:00:40,240
После выполнения запуска приложение 

9
00:00:40,240 --> 00:00:45,280
командной строки превращается в приложение ASP.NET Core.  Давайте запустим 

10
00:00:45,280 --> 00:00:51,610
его и посмотрим, что произойдет.  В Visual Studio это делается нажатием 

11
00:00:51,610 --> 00:00:55,390
кнопки «Выполнить», что запускает сеанс отладки. Но при использовании 

12
00:00:55,390 --> 00:00:57,840
редактора кода также можно 

13
00:00:57,840 --> 00:00:59,810
открыть терминал и ввести «.NET 

14
00:00:59,810 --> 00:01:04,960
run», используя инструменты .NET CLI, о которых я упоминал ранее. 

15
00:01:04,960 --> 00:01:10,810
 Откроется браузер, в котором отображается веб-страница по умолчанию. 

16
00:01:10,810 --> 00:01:15,140
 Но есть еще одно запущенное приложение, похожее на консольное. Идет 

17
00:01:15,140 --> 00:01:18,340
логирование.  Похоже, что он прослушивает 

18
00:01:18,340 --> 00:01:22,560
URL-адрес, который соответствует URL-адресу в браузере. 

19
00:01:22,560 --> 00:01:25,740
Это означает, что наше веб-приложение 

20
00:01:25,740 --> 00:01:30,650
содержит собственный веб-сервер, и браузеры могут взаимодействовать 

21
00:01:30,650 --> 00:01:35,040
с ним напрямую. Этот встроенный веб-сервер называется 

22
00:01:35,040 --> 00:01:41,310
Kestrel.  Kestrel великолепен, потому что разработчикам теперь не нужно 

23
00:01:41,310 --> 00:01:45,510
беспокоиться о настройке веб-сервера для запуска приложения во время 

24
00:01:45,510 --> 00:01:50,080
разработки приложения. Они могут просто запустить проект. Однако при 

25
00:01:50,080 --> 00:01:53,740
запуске приложения в рабочей среде 

26
00:01:53,740 --> 00:01:54,390
Kestrel часто 

27
00:01:54,390 --> 00:02:00,080
бывает недостаточно, потому что вполне вероятно, что  у вас есть несколько веб-приложений, 

28
00:02:00,080 --> 00:02:06,110
работающих на одном сервере, и вы хотите иметь единое место для управления и мониторинга 

29
00:02:06,110 --> 00:02:10,860
ими, или, возможно, необходима масштабируемость или другие функции веб-сервера, 

30
00:02:10,860 --> 00:02:17,010
которые нравятся Kestrel.  В этом случае есть возможность разместить веб-сервер 

31
00:02:17,010 --> 00:02:22,960
перед вашим приложением, например IIS, когда вы работаете в Windows. Он используется 

32
00:02:22,960 --> 00:02:25,840
в качестве примера на этом слайде, 

33
00:02:25,840 --> 00:02:28,740
но, например, NGINX и Linux также работают. 

34
00:02:28,740 --> 00:02:34,910
 Затем этот веб-сервер будет использовать инструмент .NET CLI для запуска 

35
00:02:34,910 --> 00:02:40,030
приложения и поддержания его работы. Входящие запросы к IIS будут 

36
00:02:40,030 --> 00:02:45,390
затем перенаправлены в Kestrel, а ответы будут поступать из Kestrel 

37
00:02:45,390 --> 00:02:50,240
в IIS. Разработчики могут имитировать это 

38
00:02:50,240 --> 00:02:55,830
поведение во время разработки, выбрав IIS Express из  это раскрывающееся меню, 

39
00:02:55,830 --> 00:03:00,540
а затем запустите приложение как обычно. IIS Express — это версия 

40
00:03:00,540 --> 00:03:06,340
IIS, которая используется для целей разработки. Внедрение зависимостей также 

41
00:03:06,340 --> 00:03:17,000
важно для приложений ASP.NET Core.  Далее посмотрим, как это работает. 

