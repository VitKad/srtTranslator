1
00:00:01,840 --> 00:00:07,060
В файле Program.cs этап между созданием объекта приложения и его 

2
00:00:07,060 --> 00:00:13,440
запуском состоит из вызовов методов объекта приложения, которые обычно 

3
00:00:13,440 --> 00:00:18,900
начинаются со слова use.  Здесь мы настраиваем внутренний конвейер 

4
00:00:18,900 --> 00:00:21,940
запросов. На этом этапе мы включаем 

5
00:00:21,940 --> 00:00:27,740
функции ASP.NET Core. Как только запрос достигает нашего приложения через 

6
00:00:27,740 --> 00:00:31,930
Kestrel, он обрабатывается в несколько этапов, которые составляют 

7
00:00:31,930 --> 00:00:37,040
запрос.  конвейер. Эти шаги называются промежуточным программным обеспечением. 

8
00:00:37,040 --> 00:00:40,230
Все промежуточное программное обеспечение 

9
00:00:40,230 --> 00:00:45,170
по порядку будет иметь возможность что-то сделать с запросом, 

10
00:00:45,170 --> 00:00:49,040
формируя ответ. Если вы не настроите какое-либо 

11
00:00:49,040 --> 00:00:52,650
промежуточное программное обеспечение в своем приложении, ваше 

12
00:00:52,650 --> 00:00:57,740
приложение просто ничего не будет делать, когда получит запрос.  Нам 

13
00:00:57,740 --> 00:01:03,320
нужно подключить промежуточное программное обеспечение для маршрутизации, 

14
00:01:03,320 --> 00:01:09,330
которое сопоставляет URL-адрес, используемый в браузере, с частью нашего приложения. 

15
00:01:09,330 --> 00:01:13,940
 И когда мы хотим сделать доступными статические файлы, 

16
00:01:13,940 --> 00:01:16,140
такие как изображения, файлы CSS 

17
00:01:16,140 --> 00:01:19,240
и JavaScript, для этого есть промежуточное 

18
00:01:19,240 --> 00:01:25,940
программное обеспечение. То же самое касается авторизации. Итак, в коде вы найдете 

19
00:01:25,940 --> 00:01:31,640
UseRouting, UseStaticFiles и UseAuthorization, которые все  методы расширения, 

20
00:01:31,640 --> 00:01:35,700
которые настраивают промежуточное программное обеспечение 

21
00:01:35,700 --> 00:01:41,390
в конвейере. В этом случае UseRouting включает общую функцию 

22
00:01:41,390 --> 00:01:44,880
маршрутизации, а MapRazorPages гарантирует, 

23
00:01:44,880 --> 00:01:50,340
что URL-адрес сопоставляется с соответствующей страницей Razor. Эта 

24
00:01:50,340 --> 00:01:55,050
последняя часть специфична для стиля приложения RazorPages.  Порядок 

25
00:01:55,050 --> 00:02:01,540
подключения промежуточного программного обеспечения важен, поскольку данные 

26
00:02:01,540 --> 00:02:04,860
запроса проходят через промежуточное программное 

27
00:02:04,860 --> 00:02:09,300
обеспечение последовательно.  Прежде чем вообще показывать страницу 

28
00:02:09,300 --> 00:02:16,580
Razor, вы хотите, например, выполнить авторизацию.  Есть еще кое-что, что 

29
00:02:16,580 --> 00:02:21,270
можно сказать о промежуточном программном обеспечении StaticFiles. 

30
00:02:21,270 --> 00:02:27,440
 Это промежуточное программное обеспечение может получить доступ 

31
00:02:27,440 --> 00:02:31,440
только к файлам, присутствующим в папке wwwroot, поэтому 

32
00:02:31,440 --> 00:02:43,000
все статические файлы должны находиться там. Все остальные файлы в проекте нельзя загрузить напрямую. Существует еще много примеров создания промежуточного программного обеспечения, а также есть возможность создать свой  собственный.  Далее вы увидите, как написать часть пользовательского интерфейса приложения ASP.NET Core. 

