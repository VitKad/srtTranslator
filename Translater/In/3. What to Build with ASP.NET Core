1
00:00:02,140 --> 00:00:05,040
Прежде чем мы углубимся в подробности, 

2
00:00:05,040 --> 00:00:08,820
я хочу убедиться, что мы находимся на одной странице в 

3
00:00:08,820 --> 00:00:12,140
отношении фронтальных и серверных 

4
00:00:12,140 --> 00:00:18,440
приложений. Интерфейсное приложение отвечает за доставку контента в браузер. Оно 

5
00:00:18,440 --> 00:00:21,300
должно быть таким контентом, который браузер может 

6
00:00:21,300 --> 00:00:25,440
понять, например  как HTML, CSS и JavaScript. 

7
00:00:25,440 --> 00:00:29,580
Мы узнали, что одна из функций, которые может обеспечить веб-приложение, 

8
00:00:29,580 --> 00:00:33,190
— это доступ к данным в хранилище данных, например 

9
00:00:33,190 --> 00:00:35,440
в базе данных. Интерфейсное 

10
00:00:35,440 --> 00:00:38,860
приложение может реализовать логику доступа к самому 

11
00:00:38,860 --> 00:00:42,340
хранилищу данных, а также  окружающая 

12
00:00:42,340 --> 00:00:46,850
его логика, обеспечивающая правильность данных, бизнес-правила. Однако 

13
00:00:46,850 --> 00:00:49,440
в большинстве случаев 

14
00:00:49,440 --> 00:00:54,840
лучше держать все отдельно. Пусть интерфейсная часть позаботится о пользовательском 

15
00:00:54,840 --> 00:00:59,290
интерфейсе и создаст другое приложение, связанное с данными и бизнес-правилами. 

16
00:00:59,290 --> 00:01:04,540
 Этот тип приложения называется серверным приложением, 

17
00:01:04,540 --> 00:01:08,500
а тип серверного приложения, которое предоставляет данные и 

18
00:01:08,500 --> 00:01:13,460
применяет бизнес-правила, называется веб-API или, короче, API. 

19
00:01:13,460 --> 00:01:17,990
Разделение даст нам более удобную в обслуживании 

20
00:01:17,990 --> 00:01:20,430
структуру приложения, 

21
00:01:20,430 --> 00:01:26,540
и  это позволяет нам формировать отдельные интерфейсные и серверные 

22
00:01:26,540 --> 00:01:32,540
команды, но также обеспечивает возможность повторного использования. 

23
00:01:32,540 --> 00:01:35,940
Поскольку теперь это отдельное приложение, 

24
00:01:35,940 --> 00:01:42,540
его могут использовать другие приложения. Это могут быть другие интерфейсные 

25
00:01:42,540 --> 00:01:46,140
приложения, не только веб-приложения, но и настольные 

26
00:01:46,140 --> 00:01:47,910
приложения.  а также мобильные 

27
00:01:47,910 --> 00:01:56,440
приложения и даже другие серверные приложения. ASP.NET Core позволяет создавать 

28
00:01:56,440 --> 00:02:03,140
мощные интерфейсные и серверные приложения. Он содержит три различных 

29
00:02:03,140 --> 00:02:08,540
стиля приложений для создания внешних интерфейсов: MVC, Razor Pages 

30
00:02:08,540 --> 00:02:12,240
и Blazor. Но это еще не все.  

31
00:02:12,240 --> 00:02:14,640
Для серверных приложений 

32
00:02:14,640 --> 00:02:19,940
есть веб-API и gRPC. И, наконец, есть SignalR, вспомогательная 

33
00:02:19,940 --> 00:02:21,940
технология, позволяющая создавать 

34
00:02:21,940 --> 00:02:28,140
веб-приложения в реальном времени. В следующих модулях курса я познакомлю 

35
00:02:28,140 --> 00:02:33,440
вас со всем этим. На данный момент это  достаточно, чтобы понять, что 

36
00:02:33,440 --> 00:02:34,330
ASP.NET Core 

37
00:02:34,330 --> 00:02:38,560
может гораздо больше, чем просто создать веб-страницу. 

38
00:02:38,560 --> 00:02:42,740
Он здесь, чтобы предоставить нам все необходимое 

39
00:02:42,740 --> 00:02:49,040
для создания веб-приложений, не только внешнего интерфейса, но и всех вспомогательных 

40
00:02:49,040 --> 00:02:55,140
приложений. Теперь, когда мы знаем, что  Вы можете спросить, справится 

41
00:02:55,140 --> 00:02:58,840
ли ASP.NET Core, является ли ASP.NET Core хорошим 

42
00:02:58,840 --> 00:03:02,980
выбором и есть ли альтернативы?  Следите за обновлениями. 

43
00:03:02,980 --> 00:03:09,000


