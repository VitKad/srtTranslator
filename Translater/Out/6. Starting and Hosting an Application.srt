1
00:00:02,040 --> 00:00:08,040
To explain the commonalities across all styles of ASP.NET Core applications,

2
00:00:08,040 --> 00:00:12,440
I'm using the application you start out with when you start a new

3
00:00:12,440 --> 00:00:18,790
ASP.NET Core application with Visual Studio. Every ASP.NET Core

4
00:00:18,790 --> 00:00:24,320
application starts its life as a normal command line application.

5
00:00:24,320 --> 00:00:27,540
When the application is started,

6
00:00:27,540 --> 00:00:32,590
the code in Program.cs is executed. First, a builder object

7
00:00:32,590 --> 00:00:37,240
is created, which is then used to get an app object, which

8
00:00:37,240 --> 00:00:40,240
is finally commanded to run.

9
00:00:40,240 --> 00:00:45,280
Once run is executed, the command line application has turned into

10
00:00:45,280 --> 00:00:51,610
an ASP.NET Core application. Let's run it and see what happens. In

11
00:00:51,610 --> 00:00:55,390
Visual Studio, that is done by pressing the run button, which will

12
00:00:55,390 --> 00:00:57,840
start a debugging session.

13
00:00:57,840 --> 00:00:59,810
But when using a code editor,

14
00:00:59,810 --> 00:01:04,960
it is also possible to open up a terminal and type .NET run using

15
00:01:04,960 --> 00:01:10,810
.NET's CLI tools I mentioned earlier. The browser is opened, showing

16
00:01:10,810 --> 00:01:15,140
the default web page. But there is also another application running,

17
00:01:15,140 --> 00:01:18,340
which looks like a console application.

18
00:01:18,340 --> 00:01:22,560
There is some logging. It seems to listen on the URL

19
00:01:22,560 --> 00:01:25,740
that matches the URL in the browser.

20
00:01:25,740 --> 00:01:30,650
So that means that our web application contains its own web

21
00:01:30,650 --> 00:01:35,040
server, and browsers can talk to it directly.

22
00:01:35,040 --> 00:01:41,310
This built‑in web server is called Kestrel. Kestrel is great because

23
00:01:41,310 --> 00:01:45,510
developers now don't have to be concerned about configuring a web

24
00:01:45,510 --> 00:01:50,080
server to run the application on while developing the application.

25
00:01:50,080 --> 00:01:53,740
They can simply run the project.

26
00:01:53,740 --> 00:01:54,390
However,

27
00:01:54,390 --> 00:02:00,080
when running application in production, Kestrel often doesn't suffice because

28
00:02:00,080 --> 00:02:06,110
it's likely that you have multiple web applications running on one server, and

29
00:02:06,110 --> 00:02:10,860
you want to have a single place to manage and monitor them, or maybe

30
00:02:10,860 --> 00:02:17,010
scalability is needed or other web server features Kestrel likes. In that case,

31
00:02:17,010 --> 00:02:22,960
it is a possibility to put a web server in front of your application such as

32
00:02:22,960 --> 00:02:25,840
IIS when you're on Windows.

33
00:02:25,840 --> 00:02:28,740
It is used as an example on this slide,

34
00:02:28,740 --> 00:02:34,910
but NGINX and Linux also works, for example. This web server will then

35
00:02:34,910 --> 00:02:40,030
use the .NET CLI tool to run the application and keep it running.

36
00:02:40,030 --> 00:02:45,390
Incoming requests to IIS will then be forwarded to Kestrel, and

37
00:02:45,390 --> 00:02:50,240
responses will flow from Kestrel to IIS.

38
00:02:50,240 --> 00:02:55,830
Developers can mimic this behavior at development time by choosing IIS Express

39
00:02:55,830 --> 00:03:00,540
from this drop‑down and then run the application as normal.

40
00:03:00,540 --> 00:03:06,340
IIS Express is the version of IIS that is used for development purposes.

41
00:03:06,340 --> 00:03:17,000
Dependency injection is also vital for ASP.NET Core applications. We'll see how it works, next.

